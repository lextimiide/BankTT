<?php

namespace Database\Seeders;

use App\Models\Admin;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Hash;

class AdminSeeder extends Seeder
{
    /**
     * Run the database seeds.
     * Compatible avec les environnements local et production.
     * Utilise Faker en d√©veloppement, donn√©es statiques en production.
     */
    public function run(): void
    {
        try {
            // V√©rifier l'environnement et cr√©er les admins appropri√©s
            if (App::environment('production')) {
                $this->createProductionAdmins();
            } else {
                $this->createDevelopmentAdmins();
            }

            $totalAdmins = Admin::count();
            $this->command->info("üéâ Seeding Admin termin√© avec succ√®s ! {$totalAdmins} admins pr√©sents en base.");

        } catch (\Exception $e) {
            $this->command->error("‚ùå Erreur lors du seeding des admins : {$e->getMessage()}");
            throw $e;
        }
    }

    /**
     * Cr√©er des admins pour l'environnement de production
     * Utilise des donn√©es statiques pour √©viter toute d√©pendance √† Faker
     */
    private function createProductionAdmins(): void
    {
        $this->command->info('üåç Environnement de production d√©tect√© - Cr√©ation d\'admins statiques...');

        $defaultAdmins = [
            [
                'nom' => 'Admin',
                'prenom' => 'Super',
                'email' => 'admin@banque.com',
                'password' => Hash::make('password123'),
                'email_verified_at' => now(),
            ],
            [
                'nom' => 'Manager',
                'prenom' => 'Banque',
                'email' => 'manager@banque.com',
                'password' => Hash::make('password123'),
                'email_verified_at' => now(),
            ],
        ];

        foreach ($defaultAdmins as $adminData) {
            try {
                $admin = Admin::firstOrCreate(
                    ['email' => $adminData['email']],
                    $adminData
                );

                if ($admin->wasRecentlyCreated) {
                    $this->command->info("‚úÖ Admin cr√©√© : {$adminData['prenom']} {$adminData['nom']} ({$adminData['email']})");
                } else {
                    $this->command->info("‚ÑπÔ∏è Admin d√©j√† existant : {$adminData['prenom']} {$adminData['nom']} ({$adminData['email']})");
                }
            } catch (\Exception $e) {
                $this->command->error("‚ùå Erreur cr√©ation admin {$adminData['email']} : {$e->getMessage()}");
            }
        }
    }

    /**
     * Cr√©er des admins pour l'environnement de d√©veloppement
     * Utilise Faker si disponible, sinon donn√©es statiques
     */
    private function createDevelopmentAdmins(): void
    {
        $this->command->info('üè† Environnement de d√©veloppement d√©tect√© - Cr√©ation d\'admins...');

        // Cr√©er des admins sp√©cifiques pour les tests (√©viter les doublons)
        $testAdmins = [
            [
                'nom' => 'Admin',
                'prenom' => 'Super',
                'email' => 'admin@banque.com',
                'password' => Hash::make('password123'),
                'email_verified_at' => now(),
            ],
            [
                'nom' => 'Manager',
                'prenom' => 'Banque',
                'email' => 'manager@banque.com',
                'password' => Hash::make('password123'),
                'email_verified_at' => now(),
            ],
        ];

        foreach ($testAdmins as $adminData) {
            try {
                $admin = Admin::firstOrCreate(
                    ['email' => $adminData['email']],
                    $adminData
                );

                if ($admin->wasRecentlyCreated) {
                    $this->command->info("‚úÖ Admin de test cr√©√© : {$adminData['prenom']} {$adminData['nom']} ({$adminData['email']})");
                } else {
                    $this->command->info("‚ÑπÔ∏è Admin de test d√©j√† existant : {$adminData['prenom']} {$adminData['nom']} ({$adminData['email']})");
                }
            } catch (\Exception $e) {
                $this->command->error("‚ùå Erreur cr√©ation admin de test {$adminData['email']} : {$e->getMessage()}");
            }
        }

        // Cr√©er des admins suppl√©mentaires (seulement s'il n'y en a pas assez)
        $existingCount = Admin::count();
        $targetCount = 5; // Nombre total souhait√©

        if ($existingCount < $targetCount) {
            $additionalAdminsCount = $targetCount - $existingCount;
            $this->command->info("üé≤ Cr√©ation de {$additionalAdminsCount} admins suppl√©mentaires...");

            // V√©rifier si Faker est disponible
            if ($this->isFakerAvailable()) {
                try {
                    // Utiliser Faker en d√©veloppement
                    Admin::factory($additionalAdminsCount)->create();

                    foreach (Admin::latest()->take($additionalAdminsCount)->get() as $admin) {
                        $this->command->info("‚úÖ Admin Faker cr√©√© : {$admin->prenom} {$admin->nom} ({$admin->email})");
                    }
                } catch (\Exception $e) {
                    $this->command->warn("‚ö†Ô∏è Faker indisponible, cr√©ation d'admins statiques : {$e->getMessage()}");
                    $this->createStaticAdmins($additionalAdminsCount);
                }
            } else {
                $this->command->info("‚ÑπÔ∏è Faker non disponible, cr√©ation d'admins statiques...");
                $this->createStaticAdmins($additionalAdminsCount);
            }
        } else {
            $this->command->info("‚ÑπÔ∏è Nombre d'admins suffisant ({$existingCount}), pas de cr√©ation suppl√©mentaire.");
        }

        $finalCount = Admin::count();
        $this->command->info("üéâ {$finalCount} admins pr√©sents en base de donn√©es.");
        $this->command->info('üìù Mot de passe par d√©faut pour tous les admins : password123');
        $this->command->warn('‚ö†Ô∏è Attention : Ne pas utiliser ces comptes en production !');
    }

    /**
     * Cr√©er des admins statiques (sans Faker)
     */
    private function createStaticAdmins(int $count): void
    {
        for ($i = 1; $i <= $count; $i++) {
            try {
                $admin = Admin::firstOrCreate(
                    ['email' => "admin{$i}@banque.com"],
                    [
                        'nom' => "Admin{$i}",
                        'prenom' => "Test{$i}",
                        'password' => Hash::make('password123'),
                        'email_verified_at' => now(),
                    ]
                );

                if ($admin->wasRecentlyCreated) {
                    $this->command->info("‚úÖ Admin statique cr√©√© : Test{$i} Admin{$i} (admin{$i}@banque.com)");
                } else {
                    $this->command->info("‚ÑπÔ∏è Admin statique d√©j√† existant : Test{$i} Admin{$i} (admin{$i}@banque.com)");
                }
            } catch (\Exception $e) {
                $this->command->error("‚ùå Erreur cr√©ation admin statique {$i} : {$e->getMessage()}");
            }
        }
    }

    /**
     * V√©rifier si Faker est disponible
     */
    private function isFakerAvailable(): bool
    {
        return class_exists('\Faker\Factory');
    }

    /**
     * Compter le nombre d'admins cr√©√©s pendant ce seeding
     */
    private function countCreatedAdmins(): int
    {
        return Admin::count();
    }
}
